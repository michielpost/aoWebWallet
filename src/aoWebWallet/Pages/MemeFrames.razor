@page "/meme-frames"
@using System.Text.Json
@using System.Text.Json.Serialization
@using aoWebWallet.Models
@using aoww.ProcesModels
@using aoww.ProcesModels.Metadata
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject StorageService StorageService
@inject TransactionService TransactionService
@inject GatewayUrlHelper UrlHelper


<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Class="breadcrumbs-aoww" Items="_items"></MudBreadcrumbs>

    <SelectActiveWalletComponent />

    <MudDrawer @bind-Open="@_isOpen" Width="100%" Height="80%" Anchor="Anchor.Top" Elevation="1" Variant="@DrawerVariant.Temporary">
       <MudPaper Elevation="0" Class="pa-4 border-radius-25 first-wallet">
        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Amount</th>
                    <th>Unstake At</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var orderedItems = stakers?.Items.OrderByDescending(kvp => int.Parse(kvp.Value.GetProperty("amount").GetString() ?? "0")).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
                }

                @foreach (var row in orderedItems ?? new())
                {
                    int? unstakeValue = row.Value.TryGetProperty("unstake_at", out JsonElement prop) ? prop.GetInt32() : null;
                        string detailUrl = $"/wallet/{row.Key}";
                        <tr>
                            <td>
                                <MudLink Class="KodeMono tx-wrap" Href="@detailUrl" Typo="Typo.h6">
                                    @row.Key
                                </MudLink>
                            </td>
                        <td>@row.Value.GetProperty("amount").GetString()</td>
                        <td>@unstakeValue</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>

            <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>

        </MudPaper>
    </MudDrawer>

    <MudGrid Spacing="2" Justify="Justify.Center">

        @foreach (var memeProcess in memeList)
        {
            var readActions = memeProcess.GetVisibleDryRunActions();
            var messageActions = memeProcess.GetVisibleMessageActions();

            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            @if (!string.IsNullOrEmpty(memeProcess.TokenProcess.Logo))
                            {
                                <MudAvatar Class="mr-3" Size="Size.Large"><MudImage Src="@UrlHelper.GetArweaveUrl(memeProcess.TokenProcess.Logo)" /></MudAvatar>
                            }
                            else
                            {
                                <MudAvatar Color="Color.Secondary">@memeProcess.ProcessId</MudAvatar>
                            }
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">Id: @memeProcess.ProcessId</MudText>
                            <MudText Typo="Typo.body1">Name: @memeProcess.TokenProcess.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pb-0">
                        @if (memeProcess.TokenProcess.balance.HasValue)
                        {
                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                                <b>Balance: @memeProcess.TokenProcess.balance</b>
                            </MudText>
                        }
                        <MudText Class="mb-2" Typo="Typo.body2">
                            @memeProcess.Description
                        </MudText>
                        @*   <MudTextField Class="mt-0" T="string" Label="Amount" HelperText="The amount to perform below action" HelperTextOnFocus="true" Variant="Variant.Text" /> *@
                    </MudCardContent>

                    @if (readActions.Any())
                    {
                        <MudCardActions>
                            @if (BindingContext.ActiveWalletAddress != null)
                            {
                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                                    @foreach (var action in readActions)
                                    {
                                        <MudButton OnClick="() => DryRun(action)">@action.Name</MudButton>
                                    }
                                </MudButtonGroup>
                            }
                            else
                            {
                                <MudText>Please select a wallet to enable more actions.</MudText>
                            }
                        </MudCardActions>
                    }

                    @if (messageActions.Any())
                    {
                        <MudCardActions>
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                                @foreach (var action in messageActions)
                                {
                                    <MudButton OnClick="() => GoToSend(action.AoAction)">@action.Name</MudButton>
                                }
                            </MudButtonGroup>
                        </MudCardActions>
                    }

                    <MudCardActions>
                        @if (memeProcess.FrameId != null)
                        {

                            <MudButton Href="@UrlHelper.GetArweaveUrl(memeProcess.FrameId)"
                                       Target="_blank"
                                       Variant="Variant.Filled"
                                       EndIcon="@Icons.Material.Outlined.Link"
                                       Color="Color.Primary">
                                View Current MemeFrame
                            </MudButton>
                        }

                    </MudCardActions>
                </MudCard>
            </MudItem>
        }


    </MudGrid>
</MudContainer>

@code
{
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Meme Frames", href: null, disabled: true)
    };

    private List<MemeFrameProcess> memeList = new();
    private StakeResult? stakers = null;

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override void OnInitialized()
    {
        //WatchCollection(dataService.TokenList);
        //WatchObject(dataService.TokenDataLoader);

        WatchProp(nameof(BindingContext.ActiveWalletAddress));

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            memeList = await StorageService.GetMemeFrames();

            foreach (var meme in memeList)
            {
                var initActions = meme.GetAutoRunActions();

                foreach (var initAction in initActions)
                {
                    DryRun(initAction);
                }
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task DryRun(ActionMetadata actionMetadata)
    {
        AoAction aoAction = actionMetadata.AoAction;

        var senderAddress = BindingContext.ActiveWalletAddress;
        if (senderAddress == null)
            senderAddress = aoAction.Target?.Value ?? string.Empty;

        var dryRunWallet = new Wallet() { Address = senderAddress };
        var result = await TransactionService.DryRunAction(dryRunWallet, aoAction);

        actionMetadata.ProcessResult?.Invoke(result);

        await StorageService.SaveMemeFrames(memeList);

        StateHasChanged();

        if (actionMetadata.Name == "View Stakers" && result?.Messages.FirstOrDefault()?.Data != null)
        {
            var data = result.Messages.First().Data;

            stakers = JsonSerializer.Deserialize<StakeResult>(data!);

            _isOpen = true;

            StateHasChanged();
        }
    }

    private void GoToSend(AoAction aoAction)
    {
        NavigationManager.NavigateTo($"/action?{aoAction.ToQueryString()}");
    }

    public class StakeResult
    {
        [JsonExtensionData]
        public Dictionary<string, JsonElement> Items { get; set; } = new Dictionary<string, JsonElement>();
    }
}
