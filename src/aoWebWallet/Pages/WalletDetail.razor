@page "/wallet/{address}"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>@Address - @Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h3">@Address</MudText>



    <DataLoaderProgress DataLoader="BindingContext.BalanceDataList.DataLoader" Title="Balances" />

    <MudStack>
        @if (BindingContext.BalanceDataList.Data != null)
        {
            @foreach (var balance in BindingContext.BalanceDataList.Data)
            {
                <MudPaper Class="pa-4">
                    <MudStack Row="true">

                        <MudAvatar Image="@UrlHelper.GetArweaveUrl(balance.Data?.Token?.TokenData?.Logo)" Size="Size.Large" />
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudText Typo="Typo.body1">@balance.Data?.Token?.TokenData?.Name</MudText>
                            <MudText Typo="Typo.body2">@balance.Data?.Token?.TokenData?.Ticker</MudText>
                            <MudText Typo="Typo.subtitle1">@balance.Data?.Token?.TokenId</MudText>
                        </MudStack>
                        <MudSpacer />
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <DataLoaderProgress DataLoader="balance.DataLoader" Title="Balances" />
                            @if (balance.Data?.BalanceData != null)
                            {
                                <MudText Typo="Typo.h3">@BalanceHelper.FormatBalance(balance.Data.BalanceData.Balance, balance.Data.Token?.TokenData?.Denomination ?? 0)</MudText>
                            }
                        </MudStack>
                        <MudSpacer />
                        <MudSpacer />
                        <MudStack Justify="Justify.Center" Spacing="0" Row="true">
                            <MudIconButton Icon="@Icons.Material.Filled.South" aria-label="Receive" OnClick="()=>{Receive(balance.Data?.BalanceData?.TokenId);}"></MudIconButton>
                            @if (!(BindingContext.SelectedWallet?.IsReadOnly ?? true) && (BindingContext.SelectedWallet?.IsConnected ?? false))
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.ArrowOutward" aria-label="Send" OnClick="()=>{Send(balance.Data?.BalanceData?.TokenId);}"></MudIconButton>
                            }
                        </MudStack>
                    </MudStack>
                </MudPaper>
            }
        }

    </MudStack>

    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="add token" OnClick="OpenAddTokenDialog"></MudIconButton>

</MudContainer>


@code
{
    [Parameter]
    public string? Address { get; set; }

    private void OpenAddTokenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddTokenDialog>("Add Token", options);
    }

    private void Receive(string? tokenId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ReceiveTokenDialog>("Receive Token", options);
    }

    private void Send(string? tokenId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<SendTokenDialog>("Transfer Token", options);
    }
  
}