@page "/process"
@page "/process/{ProcessId}"
@using aoww.Services
@inject NavigationManager NavigationManager
@inject GraphqlClient GraphqlClient

<PageTitle>Process @Program.PageTitlePostFix</PageTitle>

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudBreadcrumbs Class="breadcrumbs-aoww" Items="_items"></MudBreadcrumbs>

    @if (string.IsNullOrEmpty(ProcessId))
    {
        <MudText Typo="Typo.h5">Find a process</MudText>

        <MudTextField @bind-Value="inputProcessId" Label="Enter Process ID" Validation="@(new Func<string, IEnumerable<string>>(ValidateProcess))" />
        <MudButton Color="Color.Primary" Disabled="string.IsNullOrWhiteSpace(inputProcessId)" OnClick="NavigateToProcess">Go to Process</MudButton>
    }
    else
    {
        <MudText Typo="Typo.h5">Process</MudText>

        <MudText>Process ID: @ProcessId</MudText>
        
        <MudList T="string">
            @foreach (var action in actions)
            {
                <MudListItem OnClick="@(() => NavigateToActionBuilder(action))">
                    @action
                </MudListItem>
            }
        </MudList>

        <MudTextField @bind-Value="newActionName" Label="New Action Name" />
        <MudButton Color="Color.Primary" OnClick="@(() => NavigateToActionBuilder(null))">Create New Action</MudButton>
    }
</MudContainer>

@code {
    [Parameter]
    public string? ProcessId { get; set; }

    private string? inputProcessId;
    private string? newActionName;
    private List<string> actions = new List<string>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Processes", href: null, disabled: true)
        };

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ProcessId))
        {
            await LoadActions();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProcessId != null && !AddressValidator.IsValidAddress(ProcessId))
        {
            NavigationManager.NavigateTo("/process");
        }

        if (ProcessId != null)
        {
            await LoadActions();
        }

        await base.OnParametersSetAsync();
    }

    public IEnumerable<string> ValidateProcess(string? input)
    {
        if (input == null || !AddressValidator.IsValidAddress(input))
        {
            yield return "Invalid address.";
        }
    }

    private async Task LoadActions()
    {
        if (ProcessId != null)
        {
            actions = await GraphqlClient.GetActionsForProcess(ProcessId);
        }
    }

    private void NavigateToProcess()
    {
        if (!ValidateProcess(inputProcessId).Any())
            NavigationManager.NavigateTo($"/process/{inputProcessId}");
    }

    private void NavigateToActionBuilder(string? actionName = null)
    {
        string? action = actionName ?? newActionName;
        if (!string.IsNullOrEmpty(action))
        {
            NavigationManager.NavigateTo($"/action-builder?processId={ProcessId}&actionName={Uri.EscapeDataString(action)}");
        }
    }
}