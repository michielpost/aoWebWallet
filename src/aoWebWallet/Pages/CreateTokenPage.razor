@page "/create-token"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject TokenDataService dataService
@inject WalletDetailViewModel WalletDetailViewModel
@using Soenneker.Blazor.Utils.Navigation.Abstract
@inject INavigationUtil NavigationUtil
@inject CreateTokenService CreateTokenService

<PageTitle>Create a Token - @Program.PageTitlePostFix</PageTitle>

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
    <MudBreadcrumbs Class="breadcrumbs-aoww mb-4" Items="_items"></MudBreadcrumbs>

    <SelectActiveWalletComponent ReadOnly="readOnly" />

    <MudText Typo="Typo.h5">Create a new token</MudText>

    @if (!isSubmitting && !string.IsNullOrEmpty(BindingContext.ActiveWalletAddress))
    {
        <MudForm Model="tokenModel">
            <MudTextField @bind-Value="tokenModel.Name" Label="Token Name" Required="true" />
            <MudTextField @bind-Value="tokenModel.Ticker" Label="Ticker Symbol" MaxLength="5" Required="true" />
            <MudTextField @bind-Value="tokenModel.LogoUrl" Label="ArweaveId of logo" MaxLength="43"/>
            <MudNumericField @bind-Value="tokenModel.Denomination" Label="Denomination" Required="true" />
            <MudNumericField @bind-Value="tokenModel.TotalSupply" Format="@DenominationFormat" Label="Initial mint amount" Required="true" />

            @if (isPreview)
            {
                <br />
                <MudTextField @bind-Value="data" Lines="15" Style="color:black;background-color:white;font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New;" Label="Process Code" />
            }

            <MudStack Row="true">
                <MudButton Color="Color.Secondary" Variant="Variant.Filled" Disabled="@IsDisabled" OnClick="Preview" Class="mt-8">Preview</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@IsDisabled" OnClick="Submit" Class="mt-8">Submit</MudButton>
            </MudStack>
        </MudForm>
    }
    else
    {
        <SendTransactionProgress DataLoader="CreateTokenService.CreateTokenProgress.DataLoader" Title="Creating token..." />

        @if (CreateTokenService.CreateTokenProgress.DataLoader.LoadingState == LoadingState.Finished)
        {
            if (!string.IsNullOrEmpty(CreateTokenService.CreateTokenProgress.Data))
            {
                var walletUrl = $"/wallet/{CreateTokenService.CreateTokenProgress.Data}";

                <br />
                <MudText Class="mt-4">New tokenId: <a href="@walletUrl">@CreateTokenService.CreateTokenProgress.Data</a></MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GoToProcess" Class="mt-8">View Token</MudButton>

                <br />
            }
            else
            {
                <MudText Class="mt-4">@CreateTokenService.CreateTokenProgress.DataLoader.ProgressMsg</MudText>
            }


            <MudButton Color="Color.Secondary" Variant="Variant.Filled"  OnClick="ReturnToWallet" Class="mt-8">Return to Wallet</MudButton>
        }
    }
</MudContainer>

@code {
    private bool readOnly = false;
    private bool isSubmitting = false;
    private bool isPreview = false;
    private string? data = null;
    private CreateTokenModel tokenModel = new CreateTokenModel();
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Create Token", href: null, disabled: true)
    };

    public string DenominationFormat => "F" + (tokenModel.Denomination).ToString();
    public bool IsDisabled => string.IsNullOrWhiteSpace(tokenModel.Name) || string.IsNullOrWhiteSpace(tokenModel.Ticker);

    private void Preview()
    {
        var wallet = GetSelectedWallet();

        if (wallet == null)
            return;

        isPreview = true;
        data = CreateTokenService.GetTokenProcessCode(wallet.Address, tokenModel);
    }

    private async Task Submit()
    {
        isSubmitting = true;

        var wallet = GetSelectedWallet();

        if (wallet == null)
            return;

        if (wallet.NeedsUnlock)
            return;

        //Run preview if not run yet
        if (data == null)
            data = CreateTokenService.GetTokenProcessCode(wallet.Address, tokenModel);

        CreateTokenService.CreateToken(wallet, tokenModel, data);
        //Snackbar.Add("Token created successfully!", Severity.Success);

    }

    private Wallet? GetSelectedWallet()
    {
        if (BindingContext.WalletList.Data == null)
            return null;

        var wallet = BindingContext.WalletList.Data.Where(x => x.Address == BindingContext.ActiveWalletAddress).FirstOrDefault();
        if (wallet == null)
        {
            if (BindingContext.ActiveWallet?.Address == BindingContext.ActiveWalletAddress)
            {
                wallet = BindingContext.ActiveWallet;
            }
        }

        return wallet;
    }

    private void ReturnToWallet()
    {
        NavigationManager.NavigateTo($"/wallet/{BindingContext.ActiveWalletAddress}");
    }

    private void GoToProcess()
    {
        NavigationManager.NavigateTo($"/wallet/{CreateTokenService.CreateTokenProgress.Data}");
    }

    
}