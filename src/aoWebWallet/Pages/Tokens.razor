@page "/token-explorer"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5">Token Explorer</MudText>

    <DataLoaderProgress DataLoader="BindingContext.TokenList.DataLoader" Title="tokens" />

    <MudContainer style="max-width: 100%;" Width="100%" Class="d-flex justify-end mb-4 pr-4">
        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="add token" OnClick="OpenAddTokenDialog"></MudIconButton>
    </MudContainer>

    <MudStack>
        @if (BindingContext.TokenList.Data != null)
        {
            var autoAddedTokens = BindingContext.TokenList.Data.Where(x => !x.IsSystemToken && !x.IsUserAdded);

            if (autoAddedTokens.Any())
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="My Tokens">
                        @foreach (var token in BindingContext.TokenList.Data.Where(x => x.IsSystemToken || x.IsUserAdded))
                        {
                            <TokenListComponent token="token" DeleteToken="DeleteToken"></TokenListComponent>
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Other Tokens">
                        @foreach (var token in autoAddedTokens)
                        {
                            <TokenListComponent token="token" DeleteToken="DeleteToken"></TokenListComponent>
                        }
                    </MudTabPanel>
                </MudTabs>
            }
            else
            {
                foreach (var token in BindingContext.TokenList.Data)
                {
                    <TokenListComponent token="token" DeleteToken="DeleteToken"></TokenListComponent>
                }
            }




        }
    </MudStack>
</MudContainer>

@code
{

    private void OpenAddTokenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddTokenDialog>("Add Token", options);
    }

    private async void DeleteToken(Token token)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to delete {token.TokenData?.Name}?",
            yesText: "Delete!", cancelText: "Cancel");

        if (result != null)
        {
            await BindingContext.DeleteToken(token.TokenId);

            Snackbar.Add($"Token {token.TokenData?.Name} deleted ({token.TokenId})", Severity.Info);
        }
        StateHasChanged();
    }
}
