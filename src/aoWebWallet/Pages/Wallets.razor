@page "/"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject TokenDataService dataService
@inject ClipboardService ClipboardService

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @if (BindingContext.WalletList.Data == null || BindingContext.WalletList.Data.Where(x => !x.IsReadOnly).Count() > 1)
    {
        <MudText Typo="Typo.h5">Wallets</MudText>
    }
    else
    {
        <MudText Typo="Typo.h5">Wallet</MudText>
    }

        <DataLoaderProgress DataLoader="dataService.TokenDataLoader" Title="tokens" />

    <MudContainer Width="100%" Class="d-flex justify-end mb-4 pr-3 d-max-w-100">
            @if (BindingContext.WalletList.Data != null && BindingContext.WalletList.Data.Any())
                {
                    <MudTooltip Text="Add wallet" Arrow="true" Placement="Placement.Left">
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="add wallet" Size="Size.Large" OnClick="OpenDialog"></MudIconButton>
                    </MudTooltip>
                }
    </MudContainer>

    <MudStack>
        @if (BindingContext.WalletList.Data != null)
        {
            if (BindingContext.WalletList.Data.Where(x => !x.IsReadOnly).Any())
            {
                int logoCount = 1;
                foreach (var wallet in BindingContext.WalletList.Data.Where(x => !x.IsReadOnly))
                {
                    string logoUrl = $"images/account--{logoCount}.svg";
                    string detailUrl = $"wallet/{wallet.Address}";
                    <MudPaper Class="pa-4">
                        <MudStack Row="true">
                            <MudAvatar Image="@logoUrl" Size="Size.Large" Class="rounded-full" />

                            <MudStack Class="d-overflow-hidden" Justify="Justify.Center" Spacing="0">
                                <div Class="d-custom-2">
                                    <MudLink Class="KodeMono tx-wrap" Href="@detailUrl" Typo="Typo.h6">
                                        @wallet.Address
                                    </MudLink>
                                    <MudIconButton Class="copy-clipboard" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Default" OnClick="async () => { await ClipboardService.CopyToClipboard(wallet.Address); }" />
                                </div>
                                <div Class="d-flex flex-row">
                                    <MudText Typo="Typo.body2">@wallet.Name</MudText>

                                    @if (wallet.NeedsBackup)
                                    {
                                        <MudIcon Class="d-icon-wallet" Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                        <MudText Typo="Typo.body2">Wallet not backed up yet!</MudText>
                                    }
                                </div>
                            </MudStack>
                            <MudSpacer />
                            @if(BindingContext.ProcessesDataList?.Data?.Where(x => x.Data?.Address == wallet.Address && (x.Data?.Processes?.Any() ?? false)).Any() ?? false)
                            {
                                <MudChip>AOS</MudChip>
                            }
                            @if(!string.IsNullOrEmpty(wallet.Jwk))
                            {
                                <MudIconButton Class="delete-address" Icon="@Icons.Material.Filled.Save" aria-label="backup" OnClick="() => { DownloadWallet(wallet); }"></MudIconButton>
                            }
                            <MudIconButton Class="delete-address" Icon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="() => { EditWallet(wallet); }"></MudIconButton>
                            <MudIconButton Class="delete-address" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => { DeleteWallet(wallet); }"></MudIconButton>
                        </MudStack>
                    </MudPaper>

                    logoCount++;
                    if (logoCount > 5)
                        logoCount = 1;
                }
            }
            else
            {
                <MudGrid Row="true" Justify="Justify.Center" Class="p-2">
                    <MudItem sm="12" xs="12">
                        <MudTabs Class="mud-width-full" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                            <MudTabPanel Text="Create new">
                                <AddGenerateWalletComponent IsExpanded="true"></AddGenerateWalletComponent>
                            </MudTabPanel>
                            <MudTabPanel Text="ArConnect">
                                <AddArConnectComponent IsExpanded="true"></AddArConnectComponent>
                            </MudTabPanel>
                            <MudTabPanel Text="Load .json">
                                <AddUploadWalletComponent IsExpanded="true"></AddUploadWalletComponent>
                            </MudTabPanel>
                        </MudTabs>
                    </MudItem>
                </MudGrid>

            }
        }
        else
        {
            <MudText Typo="Typo.h6">Loading wallets...</MudText>

            <DataLoaderProgress DataLoader="BindingContext.WalletList.DataLoader" Title="wallets" />
        }

    </MudStack>
</MudContainer>


@code
{
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddWalletDialog>("Add Wallet", options);
    }

    private async void EditWallet(Wallet wallet)
    {
        var parameters = new DialogParameters<EditWalletComponent> { { x => x.Wallet, wallet } };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<EditWalletComponent>("Edit Wallet", parameters, options);

        StateHasChanged();
    }

    private async void DeleteWallet(Wallet wallet)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to delete this wallet? {wallet.Address}?",
            yesText: "Delete!", cancelText: "Cancel");

        if (result != null)
        {
            await BindingContext.DeleteWallet(wallet);

            Snackbar.Add($"Wallet deleted ({wallet.Address})", Severity.Info);
        }
        StateHasChanged();
    }

    private async void DownloadWallet(Wallet wallet)
    {
        await BindingContext.DownloadWallet(wallet);
        StateHasChanged();
    }
}
