@page "/"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject TokenDataService dataService
@inject ClipboardService ClipboardService
@inject NavigationManager Navigation

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="px-8 mt-2" MaxWidth="MaxWidth.False">

    <MudBreadcrumbs Class="breadcrumbs-aoww" Items="_items"></MudBreadcrumbs>

    <MudContainer style="width:100%; min-width: 100%; max-width: 100%;" Class="d-flex justify-end mb-4 pr-3">
        @if (BindingContext.WalletList.Data != null && BindingContext.WalletList.Data.Any())
            {
                <MudTooltip Text="Add wallet" Arrow="true" Placement="Placement.Left">
                    <MudIconButton Href="/start" style="padding-top: 0;" Icon="@Icons.Material.Filled.AddCircle" aria-label="add wallet" Size="Size.Large"></MudIconButton>
                </MudTooltip>
            }
    </MudContainer>

    <DataLoaderProgress DataLoader="dataService.TokenDataLoader" Title="tokens" />
    <MudStack>
        @if (BindingContext.WalletList.Data != null)
        {
            if (BindingContext.WalletList.Data.Where(x => !x.IsReadOnly).Any())
            {
                int logoCount = 1;
                foreach (var wallet in BindingContext.WalletList.Data.Where(x => !x.IsReadOnly))
                {
                    string detailUrl = $"wallet/{wallet.Address}";
                    <MudPaper Class="pa-4 wallet-list">
                        <MudStack Row="true">
                            <div Class="relative">
                                <WalletAvatar Address="@wallet.Address" />
                                @if(BindingContext.ProcessesDataList?.Data?.Where(x => x.Data?.Address == wallet.Address && (x.Data?.Processes?.Any() ?? false)).Any() ?? false)
                                    {
                                    <MudChip T="string" Class="aos-chip" Variant="Variant.Outlined" Color="Color.Dark">AOS</MudChip>
                                    }
                            </div>

                            <MudStack Class="d-overflow-hidden" Justify="Justify.Center" Spacing="0">
                                <div Class="d-custom-2">
                                    <MudLink Class="KodeMono tx-wrap" Href="@detailUrl" Typo="Typo.h6">
                                        @wallet.Address
                                    </MudLink>
                                    <MudIconButton Class="copy-clipboard" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Default" OnClick="async () => { await ClipboardService.CopyToClipboard(wallet.Address); }" />
                                </div>
                                <div Class="d-flex flex-row">
                                    <MudText Typo="Typo.body2">@wallet.Name</MudText>

                                    @if (wallet.NeedsBackup)
                                    {
                                        <MudIcon Class="d-icon-wallet" Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                        <MudText Typo="Typo.body2">Wallet not backed up yet!</MudText>
                                    }
                                </div>
                            </MudStack>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                @if(!string.IsNullOrEmpty(wallet.Jwk))
                                {
                                    <MudMenuItem>
                                        <MudButton Class="delete-address" StartIcon="@Icons.Material.Filled.Save" aria-label="backup" OnClick="() => { DownloadWallet(wallet); }">Backup</MudButton>
                                    </MudMenuItem>
                                }
                                <MudMenuItem>
                                    <MudButton Class="delete-address" StartIcon="@Icons.Material.Filled.Edit" aria-label="edit" OnClick="() => { EditWallet(wallet); }">Edit</MudButton>
                                </MudMenuItem>
                                <MudMenuItem>
                                    <MudButton Class="delete-address" StartIcon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => { DeleteWallet(wallet); }">Delete</MudButton>
                                </MudMenuItem>
                            </MudMenu>
                        </MudStack>
                    </MudPaper>

                    logoCount++;
                    if (logoCount > 5)
                        logoCount = 1;
                }
            }
            else
            {
                Navigation.NavigateTo("/start");
            }
        }
        else
        {
             <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6">Loading wallets...</MudText>

                <DataLoaderProgress DataLoader="BindingContext.WalletList.DataLoader" Title="wallets" />
            </MudPaper>
        }

    </MudStack>
</MudContainer>


@code
{
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "#"),
            new BreadcrumbItem("", href: "#")
        };

    private async void EditWallet(Wallet wallet)
    {
        var parameters = new DialogParameters<EditWalletComponent> { { x => x.Wallet, wallet } };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<EditWalletComponent>("Edit Wallet", parameters, options);

        StateHasChanged();
    }

    private async void DeleteWallet(Wallet wallet)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to delete this wallet? {wallet.Address}?",
            yesText: "Delete!", cancelText: "Cancel");

        if (result != null)
        {
            await BindingContext.DeleteWallet(wallet);

            Snackbar.Add($"Wallet deleted ({wallet.Address})", Severity.Info);
        }
        StateHasChanged();
    }

    private async void DownloadWallet(Wallet wallet)
    {
        await BindingContext.DownloadWallet(wallet);
        StateHasChanged();
    }
}
