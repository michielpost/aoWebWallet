@page "/"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h3">Wallets</MudText>

    <!--
    <p>
    <b>For testing: address examples you can add:</b><br />
    aGeRSnWykicBEGESPbTXPQ0_q2IiMLBBMyemu2pBYoA<br />
    eV-KRpB8wKowayHUUf7OpyKaUdr1WpTrRqkgiQdDVDk
    </p> -->

    <DataLoaderProgress DataLoader="BindingContext.WalletList.DataLoader" Title="Wallets" />

    <MudContainer style="max-width: 100%;"  Width="100%" Class="d-flex justify-end mb-4 pr-4">
            @if (BindingContext.WalletList.Data != null && BindingContext.WalletList.Data.Any())
                {
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="add wallet" OnClick="OpenDialog"></MudIconButton>
                }
    </MudContainer>

    <MudStack>
        @if (BindingContext.WalletList.Data != null)
        {
            if(BindingContext.WalletList.Data.Any())
            {
                foreach (var wallet in BindingContext.WalletList.Data)
                {
                    string detailUrl = $"wallet/{wallet.Address}";
                    <MudPaper Class="pa-4">
                        <MudStack Row="true">
                            <MudStack style="overflow: hidden;" Justify="Justify.Center" Spacing="0">
                                <MudLink style="text-overflow: ellipsis; white-space: nowrap;overflow: hidden;" Href="@detailUrl" Typo="Typo.h6">
                                    @wallet.Address
                                </MudLink>
                                <MudText Typo="Typo.body2">@wallet.Name</MudText>
                            </MudStack>
                            <MudSpacer />
                            @if (wallet.IsConnected)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                            }
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => { DeleteWallet(wallet); }"></MudIconButton>
                            
                        </MudStack>
                    </MudPaper>
                }
            }
            else
            {
                <MudGrid Row="true">
                    <MudItem xs="6">
                        <AddArConnectComponent></AddArConnectComponent>
                        <AddWalletComponent @ref="addWalletRef"></AddWalletComponent>
                    </MudItem>
                </MudGrid>

            }
        }

    </MudStack>
</MudContainer>


@code
{
    private AddWalletComponent? addWalletRef;

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddWalletDialog>("Add Wallet", options);
    }

    private async void DeleteWallet(Wallet wallet)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to delete this wallet? {wallet.Address}?",
            yesText: "Delete!", cancelText: "Cancel");

        if (result != null)
        {
            await BindingContext.DeleteWallet(wallet);

            Snackbar.Add($"Wallet deleted ({wallet.Address})", Severity.Info);
        }
        StateHasChanged();
    }
}
