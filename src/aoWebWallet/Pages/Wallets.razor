@page "/"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @if (BindingContext.WalletList.Data == null || BindingContext.WalletList.Data.Count > 1)
    {
        <MudText Typo="Typo.h5">Wallets</MudText>
    }
    else
    {
        <MudText Typo="Typo.h5">Wallet</MudText>
    }

    <DataLoaderProgress DataLoader="BindingContext.TokenList.DataLoader" Title="tokens" />
    <DataLoaderProgress DataLoader="BindingContext.WalletList.DataLoader" Title="wallets" />

    <MudContainer style="max-width: 100%;"  Width="100%" Class="d-flex justify-end mb-4 pr-3">
            @if (BindingContext.WalletList.Data != null && BindingContext.WalletList.Data.Any())
                {
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="add wallet" Size="Size.Large" OnClick="OpenDialog"></MudIconButton>
                }
    </MudContainer>

    <MudStack>
        @if (BindingContext.WalletList.Data != null)
        {
            if(BindingContext.WalletList.Data.Any())
            {
                int logoCount = 1;
                foreach (var wallet in BindingContext.WalletList.Data)
                {
                    string logoUrl = $"images/account--{logoCount}.svg";
                    string detailUrl = $"wallet/{wallet.Address}";
                    <MudPaper Class="pa-4">
                        <MudStack Row="true">
                            <MudAvatar Image="@logoUrl" Size="Size.Large" Class="rounded-full" />

                            <MudStack style="overflow: hidden;" Justify="Justify.Center" Spacing="0">
                                <div style="display:flex; white-space: nowrap;">
                                    <MudLink Class="KodeMono" style="text-overflow: ellipsis; white-space: nowrap;overflow: hidden;" Href="@detailUrl" Typo="Typo.h6">
                                        @wallet.Address
                                    </MudLink>
                                    <MudIconButton Class="copy-clipboard" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Default" OnClick="async () => { await BindingContext.CopyToClipboard(wallet.Address); }" />
                                </div>

                                <div style="display:flex; flex-direction:row;">
                                    @if (wallet.IsReadOnly)
                                    {
                                        <MudText Typo="Typo.body2">read-only &nbsp;</MudText>
                                    }
                                    <MudText Typo="Typo.body2">@wallet.Name</MudText>
                                    @if (wallet.IsConnected)
                                    {
                                        <MudIcon style="margin-left:2px; width:20px; padding-bottom:4px;" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    }
                                    @if (wallet.NeedsBackup)
                                    {
                                        <MudIcon style="margin-left:2px; width:20px; padding-bottom:4px;" Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                        <MudText Typo="Typo.body2">Wallet not backed up yet!</MudText>
                                    }
                                </div>
                            </MudStack>
                            <MudSpacer />

                            @if(!string.IsNullOrEmpty(wallet.Jwk))
                            {
                                <MudIconButton Class="delete-address" Icon="@Icons.Material.Filled.Save" aria-label="backup" OnClick="() => { DownloadWallet(wallet); }"></MudIconButton>
                            }
                            <MudIconButton Class="delete-address" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => { DeleteWallet(wallet); }"></MudIconButton>

                        </MudStack>
                    </MudPaper>

                    logoCount++;
                    if (logoCount > 5)
                        logoCount = 1;
                }
            }
            else
            {
                <MudGrid Row="true" Justify="Justify.Center" Class="p-2">
                    <MudItem lg="6" xs="12">
                        <AddArConnectComponent IsExpanded="true"></AddArConnectComponent>
                        <AddUploadWalletComponent IsExpanded="true"></AddUploadWalletComponent>
                        <AddGenerateWalletComponent IsExpanded="true"></AddGenerateWalletComponent>
                        <AddWalletComponent IsExpanded="true"></AddWalletComponent>
                    </MudItem>
                </MudGrid>

            }
        }

    </MudStack>
</MudContainer>


@code
{
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddWalletDialog>("Add Wallet", options);
    }

    private async void DeleteWallet(Wallet wallet)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            $"Are you sure you want to delete this wallet? {wallet.Address}?",
            yesText: "Delete!", cancelText: "Cancel");

        if (result != null)
        {
            await BindingContext.DeleteWallet(wallet);

            Snackbar.Add($"Wallet deleted ({wallet.Address})", Severity.Info);
        }
        StateHasChanged();
    }

    private async void DownloadWallet(Wallet wallet)
    {
        await BindingContext.DownloadWallet(wallet);
        StateHasChanged();
    }
}
