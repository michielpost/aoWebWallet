@page "/action"
@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject TokenDataService dataService
@inject TransactionService transactionService;
@inject WalletDetailViewModel WalletDetailViewModel

<PageTitle>@Program.PageTitlePostFix</PageTitle>


<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5">New transaction</MudText>

    <MudStack>
        @if (BindingContext.WalletList.Data != null)
        {
            if (!BindingContext.WalletList.Data.Any())
            {
                <MudButton aria-label="add wallet" Size="Size.Large" OnClick="OpenDialog">Add Wallet</MudButton>
            }
            else
            {
                <MudSelect @bind-Value="@selectedWallet" Label="Select a wallet" Variant="Variant.Outlined" MaxHeight="250" ReadOnly="@readOnly">
                    @foreach (var wallet in BindingContext.WalletList.Data ?? new())
                    {
                        <MudSelectItem Value="@wallet.Address">
                            <MudStack Row="true">
                                @* <MudAvatar Image="@logoUrl" Size="Size.Large" Class="rounded-full" /> *@
                                <MudStack style="overflow: hidden;" Justify="Justify.Center" Spacing="0">
                                    <div style="display:flex; white-space: nowrap;">
                                        <MudText Class="KodeMono" style="text-overflow: ellipsis; white-space: nowrap;overflow: hidden;" Typo="Typo.h6">
                                            @wallet.Address
                                        </MudText>
                                    </div>
                                    <div style="display:flex; flex-direction:row;">
                                        <MudText Typo="Typo.body2">@wallet.Name</MudText>
                                    </div>
                                </MudStack>
                            </MudStack>

                        </MudSelectItem>
                    }
                </MudSelect>
            }
        }

    </MudStack>

    @if(readOnly)
    {
        <MudText>Please review your transaction:</MudText>
    }

    <ActionEditor AoAction="@AoAction" ReadOnly="@readOnly" Address="@selectedWallet" />

    @if (!readOnly)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Preview">Preview</MudButton>
        <MudText Color="Color.Error">@validation</MudText>
    }
    else if (!started && string.IsNullOrEmpty(transactionService.LastTransaction.Data?.Id))
    {
        <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Submit</MudButton>
    }
    
    @if (transactionService.LastTransaction.DataLoader != null)
    {
        <SendTransactionProgress DataLoader="transactionService.LastTransaction.DataLoader" Title="Sending transaction..." />
        if (!string.IsNullOrEmpty(transactionService.LastTransaction.Data?.Id))
        {
            <MudStack>
                <MudText Typo="Typo.h5">Transfer success!</MudText>
                <MudText>TransactionId</MudText>
                <MudText Class="KodeMono" Typo="Typo.caption">
                    @transactionService.LastTransaction.Data?.Id
                </MudText>
            </MudStack>

            <MudButton Color="Color.Primary" OnClick="ReturnToWallet">Return to wallet</MudButton>
        }
    }
   

</MudContainer>

@code
{
    private string? validation;
    private string? selectedWallet;
    private Wallet? selectedWalletObj;
    private bool readOnly = false;
    private bool started = false;

    private void Preview()
    {
        //transactionService.LastTransaction.Data = new Transaction() { Id = "test" };

        validation = AoAction.IsValid();
        readOnly = string.IsNullOrEmpty(validation);
    }
    private void Cancel()
    {
        readOnly = false;
    }

    private void ReturnToWallet()
    {
        NavigationManager.NavigateTo($"/wallet/{selectedWallet}");
    }

    private async Task Submit()
    {
        if (BindingContext.WalletList.Data == null)
            return;

        var wallet = BindingContext.WalletList.Data.Where(x => x.Address == selectedWallet).FirstOrDefault();
        if(wallet == null)
        {
            if(selectedWalletObj?.Address == selectedWallet)
            {
                wallet = selectedWalletObj;
            }
        }

        if (wallet == null)
            return;

        //Do we need the owner wallet?
        Wallet? ownerWallet = BindingContext.WalletList.Data.Where(x => x.Address == wallet.OwnerAddress).FirstOrDefault();

        started = true;
        await transactionService.SendAction(wallet, ownerWallet, AoAction);
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddWalletDialog>("Add Wallet", options);
    }

}
