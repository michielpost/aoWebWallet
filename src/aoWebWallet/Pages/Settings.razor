@page "/settings"
@inherits MvvmComponentBase<MainViewModel>
@inject MainViewModel MainViewModel
@inject ISnackbar Snackbar

<PageTitle>Settings - @Program.PageTitlePostFix</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h5" Class="mb-4">Settings</MudText>

    <MudStack>
        <MudItem xs="12" sm="6" md="6">
            <MudPaper Class="pa-4">
                <MudButton OnClick="ClearUserData">Clear all user data</MudButton>
            </MudPaper>
        </MudItem>
        @if (!string.IsNullOrEmpty(BindingContext.ActiveArConnectAddress))
        {
            <MudItem xs="12" sm="6" md="6">
                <MudPaper Class="pa-4">
                    <MudButton OnClick="DisconnectArWallet">Disconnect ArConnect Extension</MudButton>
                </MudPaper>
            </MudItem>

        }

        <MudItem xs="12" sm="6" md="6">
            <MudPaper Class="pa-4">

                <MudTextField T="string" @bind-Value="BindingContext.UserSettings!.GatewayUrl" Label="Gateway" InputType="InputType.Url" />
                <MudTextField T="string" @bind-Value="BindingContext.UserSettings!.GraphqlUrl" Label="GraphQL" InputType="InputType.Url" />
                <MudTextField T="string" @bind-Value="BindingContext.UserSettings!.ComputeUnitUrl" Label="Compute Unit" InputType="InputType.Url" />
                <MudTextField T="string" @bind-Value="BindingContext.UserSettings!.MessengerUnitUrl" Label="Messenger Unit" InputType="InputType.Url" />

                <MudButton Class="pa-4"  OnClick="Submit">Save</MudButton>

            </MudPaper>
        </MudItem>


    </MudStack>
</MudContainer>

@code {
    private string? newUrl { get; set; }
    private string? customUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BindingContext.LoadUserSettings();

        await base.OnInitializedAsync();
    }

    async void Submit()
    {
        await BindingContext.SaveUserSettings();

        Snackbar.Add("Settings saved, reloading data...", Severity.Info);
    }

    async Task ClearUserData()
    {
        await BindingContext.ClearUserData();

        Snackbar.Add("User data cleared.", Severity.Info);
    }

    async Task DisconnectArWallet()
    {
        await BindingContext.DisconnectArWallet();

        Snackbar.Add("Disconnected with ArConnect.", Severity.Info);
    }

}
