@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject WalletDetailViewModel WalletDetailViewModel
@inject ISnackbar Snackbar

<MudPaper Class="pa-4 mt-4" Elevation="3">
    <MudText Typo="Typo.h4" Class="mb-4">Generate Wallet</MudText>
    <MudText Typo="Typo.body1" Class="mb-4">Enter a password to encrypt your wallet. The password must be at least 6 characters long.</MudText>

    <MudTextField @bind-Value="Password"
    Label="Password"
    Variant="Variant.Outlined"
    InputType="@PasswordInput"
    Adornment="Adornment.End"
    AdornmentIcon="@PasswordInputIcon"
    OnAdornmentClick="TogglePasswordVisibility"
    Error="@(!string.IsNullOrEmpty(PasswordError))"
    ErrorText="@PasswordError" />

    <MudTextField @bind-Value="ConfirmPassword"
    Label="Confirm Password"
    Variant="Variant.Outlined"
    InputType="@PasswordInput"
    Adornment="Adornment.End"
    AdornmentIcon="@PasswordInputIcon"
    OnAdornmentClick="TogglePasswordVisibility"
    Error="@(!string.IsNullOrEmpty(ConfirmPasswordError))"
    ErrorText="@ConfirmPasswordError" />

    <MudButton Variant="Variant.Filled"
    Color="Color.Primary"
    OnClick="SetSecretKey"
    Class="mt-4">
        Generate Wallet
    </MudButton>
</MudPaper>



@code {

    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private bool PasswordVisible { get; set; } = false;
    private InputType PasswordInput { get; set; } = InputType.Password;
    private string PasswordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    private string PasswordError { get; set; } = string.Empty;
    private string ConfirmPasswordError { get; set; } = string.Empty;

    private void TogglePasswordVisibility()
    {
        if (PasswordVisible)
        {
            PasswordVisible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void SetSecretKey()
    {
        PasswordError = string.Empty;
        ConfirmPasswordError = string.Empty;

        if (string.IsNullOrWhiteSpace(Password) || string.IsNullOrWhiteSpace(ConfirmPassword))
        {
            PasswordError = "Please enter and confirm your password.";
            return;
        }

        if (Password != ConfirmPassword)
        {
            ConfirmPasswordError = "Passwords do not match.";
            return;
        }

        if (Password.Length < 6)
        {
            PasswordError = "Password must be at least 6 characters long.";
            return;
        }

        if (BindingContext.WalletList.Data?.Any(x => x.NeedsUnlock) ?? true)
        {
            PasswordError = "Unable to set a new password. Please unlock your wallet first.";
            return;
        }

        BindingContext.SecretKey = Password;
        WalletDetailViewModel.SecretKey = Password;

        Snackbar.Add("Password set successfully!", Severity.Success);
    }
}
