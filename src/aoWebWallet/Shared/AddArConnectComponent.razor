@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject TokenClient TokenClient
@inject ISnackbar Snackbar
@inject ArweaveService ArweaveService

<MudPaper Class="pa-4">
    <MudStack Spacing="2">
        <MudButton OnClick="OnExpandCollapseClick">@(_expanded ? "Connect wallet" : "Connect wallet")</MudButton>
        <MudDivider />
        <MudCollapse Expanded="_expanded">

            @if (!BindingContext.HasArConnectExtension.HasValue)
            {
                <MudText>Checking for ArConnect extension...</MudText>
            }
            else if (!BindingContext.HasArConnectExtension.Value)
            {
                <MudLink>Download ArConnect</MudLink>
            }
            else if (BindingContext.HasArConnectExtension.Value)
            {
                <MudButton>Connect TODO</MudButton>
            }

           @*  @if (!HideAddButton)
            {
                <MudButton Color="Color.Primary" OnClick="Submit">Add</MudButton>
            } *@
        </MudCollapse>
    </MudStack>
</MudPaper>



@code {
    [Parameter]
    public bool HideAddButton { get; set; }



    public string? Name { get; set; }
    public string? Address { get; set; }
    public string? Progress { get; set; }

    bool _expanded = false;

    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }

    public async Task Connect()
    {
        await ArweaveService.ConnectAsync(new string[] { "ACCESS_ADDRESS", "SIGN_TRANSACTION" }, "Sample App");

    }

    public async Task Disconnect()
    {
        await ArweaveService.DisconnectAsync();

    }

    public async Task GetBalance()
    {
        var result = await ArweaveService.GetWalletBalanceAsync("1seRanklLU_1VTGkEk7P0xAwMJfA7owA1JHW5KyZKlY");

    }

    public async Task GetActiveAddress()
    {
        var result = await ArweaveService.GetActiveAddress();

    }

    public async Task<bool> Submit()
    {
        if(string.IsNullOrWhiteSpace(Address))
        {
            Progress = "Input ta wallet address.";
            StateHasChanged();
            return false;
        }
        if (Address.Length != 43)
        {
            Progress = "Length must be 43 characters.";
            StateHasChanged();
            return false;
        }

        var wallet = new Wallet
            {
                Address = Address,
                Name = Name,
                Source = WalletTypes.ArConnect,
                IsReadOnly = false,
                AddedDate = DateTimeOffset.UtcNow
            };

        await BindingContext.SaveWallet(wallet);

        Snackbar.Add($"Wallet added ({Address})", Severity.Info);
        return true;
    }
}
