@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>
@inject ISnackbar Snackbar
@inject ArweaveService ArweaveService

<MudPaper Class="pa-8 mb-4 trigger-transparency">
    <MudStack Spacing="2">
        <MudStack>

            @if (!BindingContext.HasArConnectExtension.HasValue)
            {
                <MudText>Checking for ArConnect extension...</MudText>
            }
            else if (!BindingContext.HasArConnectExtension.Value)
            {
                <MudButton Href="https://www.arconnect.io/" style="cursor:pointer;">
                    <div Class="d-custom-4">
                        <MudImage Class="d-custom-5 rounded-lg" Src="images/arconnect.webp" Alt="arconnect logo" Elevation="25" />
                        <MudText Typo="Typo.subtitle2" Class="ml-3">Download ArConnect</MudText>
                    </div>
                </MudButton>
            }
            else if (BindingContext.HasArConnectExtension.Value)
            {
                if (string.IsNullOrEmpty(BindingContext.ActiveArConnectAddress))
                {
                    <MudButton Class="d-custom-6" OnClick="Connect" Elevation="3">
                        <div Class="d-custom-4">
                            <MudImage Class="d-custom-5 rounded-lg" Src="images/arconnect.webp" Alt="arconnect logo" Elevation="25" />
                            <MudText Typo="Typo.subtitle2" Class="ml-3">Connect with ArConnect</MudText>
                        </div>
                    </MudButton>

                }
                else
                {
                    var wallet = BindingContext.WalletList.Data?.Where(x => x.Source == WalletTypes.ArConnect && x.Address == BindingContext.ActiveArConnectAddress).FirstOrDefault();
                    if (wallet == null)
                    {
                        <MudButton Class="d-custom-6" OnClick="Connect" Elevation="3">
                            <div Class="d-custom-4">
                                <MudImage Class="d-custom-5 rounded-lg" Src="images/arconnect.webp" Alt="arconnect logo" Elevation="25" />
                                <MudText Typo="Typo.subtitle2" Class="ml-3">Connect with ArConnect</MudText>
                            </div>
                        </MudButton>
                    }
                    else
                    {
                        <MudText>Already connected with ArConnect</MudText>
                    }
                    @* <MudButton OnClick="Disconnect">Disconnect</MudButton> *@
                }
            }

            @*  @if (!HideAddButton)
            {
            <MudButton Color="Color.Primary" OnClick="Submit">Add</MudButton>
            } *@
        </MudStack>
    </MudStack>
</MudPaper>



@code {
    [Parameter]
    public bool HideAddButton { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }


    public string? Name { get; set; }

    private void OnExpandCollapseClick()
    {
        IsExpanded = !IsExpanded;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BindingContext.CheckHasArConnectExtension();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Connect()
    {
        await BindingContext.GetActiveArConnectAddress();

        if (string.IsNullOrEmpty(BindingContext.ActiveArConnectAddress))
        {
            Snackbar.Add($"Please allow this website access to ArConnect", Severity.Info);
        }
        await ArweaveService.ConnectArConnectAsync(new string[] { "ACCESS_ADDRESS", "SIGN_TRANSACTION" }, "aoWebWallet");

        await BindingContext.GetActiveArConnectAddress();


        if (string.IsNullOrEmpty(BindingContext.ActiveArConnectAddress))
        {
            Snackbar.Add($"Access to ArConnect denied", Severity.Error);
        }
        else
        {
            var address = BindingContext.ActiveArConnectAddress;
            var wallet = new Wallet
                {
                    Address = address,
                    Name = "ArConnect",
                    Source = WalletTypes.ArConnect,
                    IsReadOnly = false,
                    AddedDate = DateTimeOffset.UtcNow
                };

            await BindingContext.SaveWallet(wallet);

            await BindingContext.CheckHasArConnectExtension();

            Snackbar.Add($"Wallet added ({address})", Severity.Info);

            MudDialog?.Close(true);
        }
    }

    public async Task Disconnect()
    {
        await ArweaveService.DisconnectAsync();
    }
}
