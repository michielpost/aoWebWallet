@using aoWebWallet.Models
@using aoWebWallet.Shared
@inherits MvvmComponentBase<MainViewModel>
@inject TokenClient TokenClient
@inject ISnackbar Snackbar

<MudDialog style="width:444px;">
    <DialogContent>
        <MudStack Row=true>
            <MudAvatar Image="@UrlHelper.GetArweaveUrl(BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Logo)" Size="Size.Large" title="@BindingContext.SelectedBalanceDataVM?.Token?.TokenId" />
            <MudStack Justify="Justify.Center" Spacing="0">
                <MudText Typo="Typo.body1">@BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Name</MudText>
                <MudText Typo="Typo.body2">@BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Ticker</MudText>
            </MudStack>
        </MudStack>
        <MudText style="width:100%; margin-left:auto; text-align:right;" Class="mt-2" Typo="Typo.body1">Available balance<br/> <strong>@BalanceHelper.FormatBalance(BindingContext.SelectedBalanceDataVM?.BalanceData?.Balance, BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Denomination ?? 0)</strong></MudText>

        @if (!isConfirm)
        {
            <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                <MudTextField Class="mb-4" @bind-Value="Address" MaxLength=43 Label="Wallet address" Variant="Variant.Text"></MudTextField>
                <MudTextField @bind-Value="Amount" Label="Amount" Variant="Variant.Text" Format="@DenominationFormat"></MudTextField>
            </MudFocusTrap>
            <MudText Color="Color.Secondary">@Progress</MudText>
        }

        @if (isConfirm)
        {
            if (string.IsNullOrEmpty(TransactionId))
            {
                <MudStack>
                    <MudText Typo="Typo.h5">Are you sure?</MudText>
                    <MudText>You are about to transfer:</MudText>
                </MudStack>
            }
            <MudStack>
                <MudText>Amount: @Amount @BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Ticker</MudText>
                <MudText>Receiver:</MudText>
                <MudText Class="KodeMono" Typo="Typo.caption">
                        @Address
                </MudText>
            </MudStack>

            <SendTransactionProgress DataLoader="BindingContext.LastTransactionId.DataLoader" Title="Sending transaction..." />

            if (!string.IsNullOrEmpty(TransactionId))
            {
                <MudStack>
                    <MudText Typo="Typo.h5">Transfer success!</MudText>
                    <MudText>TransactionId</MudText>
                    <MudText Class="KodeMono" Typo="Typo.caption">
                        @TransactionId
                    </MudText>
                </MudStack>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (!isConfirm)
        {
            <MudButton Color="Color.Primary" OnClick="Submit">Next</MudButton>
        }
        else
        {
            if (string.IsNullOrEmpty(TransactionId))
            {
                if (!BindingContext.LastTransactionId.DataLoader.IsLoading)
                {
                    <MudButton Color="Color.Primary" @ref="confButtonRef" OnClick="Confirm">Confirm</MudButton>
                }
            }
            else
            {
                <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
            }
        }
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    public string? Progress { get; set; }
    public string? Address { get; set; }
    public decimal Amount { get; set; }
    public string? TransactionId { get; set; }

    public bool isConfirm = false;
    public bool showLoader = false;

    public MudButton? confButtonRef;

    public int Denomination => BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Denomination ?? 0;
    public string DenominationFormat => "F" + (BindingContext.SelectedBalanceDataVM?.Token?.TokenData?.Denomination ?? 1).ToString();

    public async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(Address))
        {
            Progress = "Input a wallet address.";
            StateHasChanged();
            return;
        }
        if (Address.Length != 43)
        {
            Progress = "Address length must be 43 characters.";
            StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(BindingContext.SelectedBalanceDataVM?.BalanceData?.TokenId)
        || BindingContext.SelectedBalanceDataVM.Token?.TokenData?.Denomination == null
        || !BindingContext.SelectedBalanceDataVM.Token.TokenData.Denomination.HasValue)
            return;

        long amountLong = BalanceHelper.DecimalToTokenAmount(Amount, BindingContext.SelectedBalanceDataVM.Token.TokenData.Denomination!.Value);
        if (amountLong <= 0)
        {
            Progress = "Amount has to be higher than 0.";
            StateHasChanged();
            return;
        }
        if (amountLong > BindingContext.SelectedBalanceDataVM?.BalanceData?.Balance)
        {
            Progress = "Not enough balance available.";
            StateHasChanged();
            return;
        }

        isConfirm = true;
    }

    public async Task Confirm()
    {
        if (string.IsNullOrEmpty(Address))
            return;

        if (string.IsNullOrEmpty(BindingContext.SelectedBalanceDataVM?.BalanceData?.TokenId)
        || BindingContext.SelectedBalanceDataVM.Token?.TokenData?.Denomination == null
        || !BindingContext.SelectedBalanceDataVM.Token.TokenData.Denomination.HasValue)
            return;

        if (confButtonRef != null)
            confButtonRef.Disabled = true;

        this.StateHasChanged();

        long amountLong = BalanceHelper.DecimalToTokenAmount(Amount, BindingContext.SelectedBalanceDataVM.Token.TokenData.Denomination!.Value);
        var result = await BindingContext.SendTokenWithArConnect(BindingContext.SelectedBalanceDataVM.Token.TokenId, Address, amountLong);
        TransactionId = result?.Id;

        if (!string.IsNullOrEmpty(BindingContext.SelectedAddress))
        {
            await BindingContext.LoadBalanceDataList(BindingContext.SelectedAddress);
            await BindingContext.LoadTokenTransferList(BindingContext.SelectedAddress);
        }

        if (TransactionId != null)
        {
            await BindingContext.AddToLog(ActivityLogType.SendTransaction, TransactionId);
        }
    }

    public void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));

    }

    void Cancel() => MudDialog.Cancel();
}
