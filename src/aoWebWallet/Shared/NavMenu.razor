@inherits MvvmComponentBase<MainViewModel>

<MudNavMenu Class="aoww-main-menu">

    @if (BindingContext.WalletList.Data?.Where(x => !x.IsReadOnly).Any() ?? false)
    {
        <MudNavLink Href="" Match="NavLinkMatch.All" Class="aoww-main-nav-text mt-2" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavGroup Class="mt-2 mb-2" Title="Wallets" Icon="@Icons.Material.Filled.Wallet" Expanded="true">
            @{
                int logoCount = 1;
            }
            @foreach (var wallet in BindingContext.WalletList.Data?.Where(x => !x.IsReadOnly).ToList() ?? new())
            {
                string logoUrl = $"images/account--{logoCount}.svg";
                string detailUrl = $"wallet/{wallet.Address}";

                    <MudNavLink Class="menu-wallets" Href="@detailUrl" style="font-size:12px;" Match="NavLinkMatch.All">
                        <MudAvatar Image="@logoUrl" Size="Size.Small" Class="rounded-full mr-2" />
                        <div>@wallet.Address.ToShortAddress()</div>
                    </MudNavLink>

                logoCount++;
            }
        </MudNavGroup>
    }
    else
    {
        <MudNavLink Href="" Match="NavLinkMatch.All" Class="aoww-main-nav-text mt-2" Icon="@Icons.Material.Filled.Wallet">Wallets</MudNavLink>
    }

    <MudNavLink Href="/address-book" Match="NavLinkMatch.All" Class="aoww-main-nav-text mt-2" Icon="@Icons.Material.Filled.Contacts">Address Book</MudNavLink>

    <MudNavLink Href="token-explorer" Match="NavLinkMatch.Prefix" Class="aoww-main-nav-text" Icon="@Icons.Material.Filled.Explore">Token Explorer</MudNavLink>

    <div style="margin-top: auto; display:flex; flex-direction: row; margin-bottom:20px">
        <div style="border-right: 1px solid gray;">
            <MudNavLink Href="settings" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings">Settings</MudNavLink>
            <MudNavLink style="margin-bottom:5px;" Href="about" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Info">About</MudNavLink>
        </div>
        <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; margin-left:4px; padding:5px;">
            @* @if (BindingContext.UserSettings?.IsDarkMode ?? true)
            {
                <MudIcon Icon="@icons[1]" Color="Color.Primary" />
            }
            else
            {
                <MudIcon Icon="@icons[0]" Color="Color.Primary" />
            }
            <MudButton Variant="Variant.Filled" OnClick="ToggleTheme" DisableElevation="true" Size="Size.Small">Theme</MudButton> *@

            <MudLink Href="https://twitter.com/aoWebWallet">
                <MudChip Class="cursor-pointer">
                    <AvatarContent >
                        <MudAvatar Class="custom-avatar-size">
                            <MudImage Class="twitter-image" Src="images/twitter.svg"></MudImage>
                        </MudAvatar>
                    </AvatarContent>
                    <ChildContent>Twitter</ChildContent>
                </MudChip>
            </MudLink>

            <MudLink Href="https://discord.gg/bahdqzpNYW">
                <MudChip Class="cursor-pointer">
                    <AvatarContent >
                        <MudAvatar Class="custom-avatar-size">
                            <MudImage Class="discord-image" Src="images/discord.svg"></MudImage>
                        </MudAvatar>
                    </AvatarContent>
                    <ChildContent>Discord</ChildContent>
                </MudChip>
            </MudLink>
        </div>

    </div>

</MudNavMenu>

@code {
    private string[] icons = { Icons.Material.Filled.WbSunny, Icons.Material.Filled.NightlightRound };
    int logoCount = 1;

    protected override void OnInitialized()
    {
        WatchDataLoaderVM(BindingContext.WalletList);

        BindingContext.PropertyChanged += BindingContext_PropertyChanged;

        base.OnInitialized();
    }

    private void BindingContext_PropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(MainViewModel.IsDarkMode))
        {
            this.StateHasChanged();
        }
    }

    public virtual void Dispose()
    {
        BindingContext.PropertyChanged -= BindingContext_PropertyChanged;
    }

    private Task ToggleTheme()
    {
        return BindingContext.SetIsDarkMode(!BindingContext.IsDarkMode);
    }
}
