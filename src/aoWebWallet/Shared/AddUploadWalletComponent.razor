@using aoWebWallet.Models
@using aoww.Services
@inherits MvvmComponentBase<MainViewModel>
@inject ArweaveService ArweaveService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager


<MudPaper Elevation="0" Class="pa-8 trigger-transparency">
    <MudStack Spacing="2">
        @* <MudText Class="d-flex justify-center" Typo="Typo.button">Load .json wallet</MudText>
            <MudDivider /> *@
            <MudStack Class="d-w-100">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                               Accept=".json"
                               OnFilesChanged="OnInputFileChanged"
                               Hidden="@false"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20 trigger-transparency cursor-pointer"
                               InputStyle="opacity:0"
                               @ondragenter="@SetDragClass"
                               @ondragleave="@ClearDragClass"
                               @ondragend="@ClearDragClass">
                <ActivatorContent>
                        <MudPaper Height="100%"
                                  Outlined="true"
                                  Class="@_dragClass">
                            <MudText Typo="Typo.h6">
                                Drag and drop wallet file or click here.
                            </MudText>
                            <MudText Typo="Typo.subtitle1">
                                Your .JSON files won't be uploaded and are only read by the local app.
                            </MudText>
                            @foreach (var file in _fileNames)
                            {
                            <MudChip T="string" Color="Color.Dark" Text="@file.Name" />
                            }
                        </MudPaper>
                        <MudToolBar Gutters="false"
                                    Class="relative d-flex justify-center gap-4 z-30">
                                <MudButton HtmlTag="label"
                                           Class="text-transform-none"
                                           Color="Color.Primary"
                                           Variant="Variant.Filled">
                                    Load .json wallet
                                </MudButton>
                            @*  <MudButton OnClick="@AddWallets"
                                       Color="Color.Primary"
                                       Disabled="@(!_fileNames.Any())"
                                       Variant="Variant.Filled">
                                Use wallets
                            </MudButton>
                            <MudButton OnClick="@Clear"
                                       Color="Color.Error"
                                       Disabled="@(!_fileNames.Any())"
                                       Variant="Variant.Filled">
                                Clear
                            </MudButton> *@
                        </MudToolBar>
                    </ActivatorContent>
                </MudFileUpload>
            </MudStack>
    </MudStack>
</MudPaper>



@code {
    [Parameter]
    public bool HideAddButton { get; set; }

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; } = default!;


    public string? Progress { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    private void OnExpandCollapseClick()
    {
        IsExpanded = !IsExpanded;
    }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<Wallet> _fileNames = new();

    private async Task Clear()
    {
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            // Ensure file is not null and has content
            if (file != null && file.Size > 0)
            {
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    memoryStream.Seek(0, SeekOrigin.Begin);

                    using (var reader = new StreamReader(memoryStream))
                    {
                        try
                        {
                            var jwk = await reader.ReadToEndAsync();
                            var address = await ArweaveService.GetAddress(jwk);
                            var name = file.Name;

                            if (string.IsNullOrEmpty(address))
                                throw new Exception("No address");

                            var wallet = new Wallet
                                {
                                    Address = address,
                                    Name = name,
                                    JwkSecret = jwk,
                                    Source = WalletTypes.Imported,
                                    IsReadOnly = false,
                                    AddedDate = DateTimeOffset.UtcNow
                                };

                            if (!string.IsNullOrEmpty(BindingContext.SecretKey))
                            {
                                var jwkEncrypted = EncryptionService.EncryptWallet(BindingContext.SecretKey, jwk);
                                wallet.JwkEncrypted = jwkEncrypted;
                            }

                            _fileNames.Add(wallet);
                        }
                        catch
                        {
                            Snackbar.Add($"Unable to read wallet file: {file.Name}", Severity.Error);
                        }

                    }
                }
            }
        }

        await AddWallets();

    }

    private async Task AddWallets()
    {
        foreach (var wallet in _fileNames)
        {
            await BindingContext.SaveWallet(wallet);

            Snackbar.Add($"Wallet added ({wallet.Address})", Severity.Info);
        }

        if (MudDialog != null)
        {
            MudDialog.Close();
        }
        else if(_fileNames.Count == 1)
        {
            NavigationManager.NavigateTo($"/wallet/{_fileNames.First().Address}");
        }
        else
        {
            NavigationManager.NavigateTo($"/");
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
