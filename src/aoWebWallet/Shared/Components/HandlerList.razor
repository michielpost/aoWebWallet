@using ArweaveAO.Models
@using aoww.ProcesModels
@using aoww.ProcesModels.Metadata
@inject AODataClient aoDataClient
@inject NavigationManager NavigationManager

@if (processType != null)
{
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6">Process Type Detected: @processType</MudText>

            @if (readActions.Any())
            {
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    @foreach (var action in readActions)
                    {
                        <MudButton OnClick="() => GoToSend(action.AoAction)">@action.Name</MudButton>
                    }
                </MudButtonGroup>
            }

            @if (messageActions.Any())
            {
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    @foreach (var action in messageActions)
                    {
                        <MudButton OnClick="() => GoToSend(action.AoAction)">@action.Name</MudButton>
                    }
                </MudButtonGroup>
            }
        </MudPaper>
    </MudItem>
}

<MudItem xs="12" sm="6">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Handlers</MudText>
        @if (handlers == null)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        else if (handlers.Count == 0)
        {
            <MudText>No handlers found.</MudText>
        }
        else
        {
            <MudList T="string">
                @foreach (var handler in handlers)
                {
                    if(handler == "_eval")
                    {
                        var aoAction = new AoAction() { HasData = true };
                        aoAction.Params.Add(new ActionParam() { Key = "Target", Value = ProcessId, ParamType = ActionParamType.Target });
                        aoAction.Params.Add(new ActionParam() { Key = "Action", Value = "Eval", ParamType = ActionParamType.Filled });
                        <MudButton OnClick="() => GoToSend(aoAction)">@handler</MudButton>
                    }
                    else{
                        <MudListItem>@handler</MudListItem>
                    }
                }
            </MudList>
        }
    </MudPaper>
</MudItem>



@code {
    [Parameter]
    public required string ProcessId { get; set; }

    [Parameter]
    public required string OwnerId { get; set; }

    private List<string>? handlers;

    private string? processType;
    private Process? process;
    private List<ActionMetadata> readActions = new();
    private List<ActionMetadata> messageActions = new();

    protected override async Task OnParametersSetAsync()
    {
        handlers = null;
        process = null;
        processType = null;
        readActions = new();
        messageActions = new();

        handlers = await aoDataClient.GetHandlers(ProcessId, OwnerId);

        processType = DetectProcessType(handlers);

        if (process != null)
        {
            readActions = process.GetActionMetadata().ToList();
            //readActions = process.GetVisibleDryRunActions().ToList();
            //messageActions = process.GetVisibleMessageActions().ToList();
        }


        StateHasChanged();
    }

    public string? DetectProcessType(List<string>? handlers)
    {
        if (handlers == null || !handlers.Any())
            return null;

        if (handlers.Contains("Vote", StringComparer.OrdinalIgnoreCase))
        {
            process = new MemeFrameProcess(ProcessId);
            return "MemeFrame";
        }

        if (handlers.Contains("Info", StringComparer.OrdinalIgnoreCase)
         && handlers.Contains("Balance", StringComparer.OrdinalIgnoreCase)
         && handlers.Contains("Transfer", StringComparer.OrdinalIgnoreCase))
        {
            process = new TokenProcess(ProcessId);
            return "Token";
        }

        return null;
    }

    private void GoToSend(AoAction aoAction)
    {
        NavigationManager.NavigateTo($"/action?{aoAction.ToQueryString()}");
    }
}