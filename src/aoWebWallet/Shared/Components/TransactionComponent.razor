@using aoWebWallet.Models
@inherits MvvmComponentBase<MainViewModel>

@if (transfer != null)
{
    var tokenData = BindingContext.TokenList.Data?.Where(x => x.TokenId == transfer.TokenId).Select(x => x.TokenData).FirstOrDefault();
    var isSend = SelectedAddress == transfer.From;
    var isReceive = SelectedAddress == transfer.To;
    string txUrl = $"transaction/{transfer.Id}";
    <MudTimelineItem>
        <ItemDot>
            <MudAvatar Image="@UrlHelper.GetArweaveUrl(tokenData?.Logo)" Size="Size.Medium" title="@tokenData?.TokenId" />
        </ItemDot>
        <ItemContent>
            @if (transfer.BlockHeight.HasValue)
            {
                <MudText Typo="Typo.caption">@transfer.Timestamp.ToString("s")</MudText>
            }
            else
            {
                <MudText Typo="Typo.caption">unconfirmed</MudText>
            }
            @*<MudText Typo="Typo.body1">@tokenData.Name</MudText>*@
            <MudText style="font-weight:500;" Typo="Typo.body2">@tokenData?.Ticker</MudText>
            <MudStack Row=true>
                <MudText>txId: </MudText>
                <MudLink Class="KodeMono" style="text-overflow: ellipsis; white-space: nowrap;overflow: hidden;" Href="@txUrl" Typo="Typo.body1">
                    @transfer.Id
                </MudLink>
            </MudStack>

            @{
                string detailUrlFrom = $"wallet/{transfer.From}";
                string detailUrlTo = $"wallet/{transfer.To}";
            }


            @if (isSend)
            {
                <MudText Typo="Typo.h6" style="color:red">- @BalanceHelper.FormatBalance(transfer.Quantity, tokenData?.Denomination ?? 0)</MudText>
                <MudIcon Icon="@Icons.Material.Filled.ArrowOutward" aria-label="Receive"></MudIcon>
                <MudLink Class="KodeMono tx-wrap" Href="@detailUrlTo" Typo="Typo.h6">
                    @transfer.To
                </MudLink>
            }
            else if(isReceive)
            {
                <MudText Typo="Typo.h6" style="color:green">+ @BalanceHelper.FormatBalance(transfer.Quantity, tokenData?.Denomination ?? 0)</MudText>
                <MudIcon Icon="@Icons.Material.Filled.South" aria-label="Receive"></MudIcon>
                <MudLink Class="KodeMono tx-wrap" Href="@detailUrlFrom" Typo="Typo.h6">
                    @transfer.From
                </MudLink>
            }
            else
            {
                <MudLink Class="KodeMono tx-wrap" Href="@detailUrlFrom" Typo="Typo.h6">
                    @transfer.From
                </MudLink>
                <br />
                <MudIcon style="width:15px;" Icon="@Icons.Material.Filled.South" aria-label="Receive"></MudIcon>
                <br />

                <MudLink Class="KodeMono tx-wrap" Href="@detailUrlTo" Typo="Typo.h6">
                    @transfer.To
                </MudLink>

                <MudText Typo="Typo.h4">@BalanceHelper.FormatBalance(transfer.Quantity, tokenData?.Denomination ?? 0)</MudText>
            }
        </ItemContent>
    </MudTimelineItem>
}


@code {
    [Parameter]
    public TokenTransfer? transfer { get; set; }

    [Parameter]
    public string? SelectedAddress { get; set; }

}
