@using aoWebWallet.Models


<MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
    <MudItem>
        <MudChip T="string">Process ID</MudChip> <MudChip T="string" Style="border-radius:0; margin-top:0;" Class="KodeMono tx-wrap" Variant="Variant.Text" Color="Color.Primary">@AoAction.Target?.Value?.ToShortAddress()</MudChip>
    </MudItem>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
	<MudItem>
        <MudChip T="string">Process ID</MudChip> <MudChip T="string" Style="border-radius:0; margin-top:0;" Class="KodeMono tx-wrap" Variant="Variant.Text" Color="Color.Primary">@AoAction.Target?.Value</MudChip>
    </MudItem>
</MudHidden>

<MudStack>
    @foreach (var ActionParam in AoAction.Filled)
    {
        <MudItem>
            <MudChip T="string">@ActionParam.Key</MudChip> <MudChip T="string" Style="border-radius:0; margin-top:0;" Variant="Variant.Text" Color="Color.Success" SelectedColor="Color.Error">@ActionParam.Value</MudChip>
        </MudItem>
    }

</MudStack>

<MudStack>
    @foreach (var param in AoAction.AllInputs)
    {
        if (param.ParamType == ActionParamType.Input
        || param.ParamType == ActionParamType.Integer
        || param.ParamType == ActionParamType.Process
        )
        {
            <ActionInputComponent ActionParam="param" ReadOnly="@ReadOnly" />
        }
        else if (param.ParamType == ActionParamType.Quantity || param.ParamType == ActionParamType.Balance)
        {
            var tokenId = param.Args.FirstOrDefault();
            if (tokenId != null)
            {
                <ActionQuantityComponent ActionParam="param" TokenId="@tokenId" Address="@Address" ReadOnly="@ReadOnly" />
            }



        }
    }

</MudStack>


@code {
    [Parameter]
    public required AoAction AoAction { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? Address { get; set; }
}
